{"version":3,"sources":["../../src/client/index.tsx","../../src/components/cast.tsx","../../src/components/icons.tsx","../../src/components/cast-images.tsx","../../src/client/video-player-client.tsx","../../src/components/video-player.tsx","../../src/components/cast-videos.tsx","../../src/api.ts","../../src/options.ts"],"sourcesContent":["\"use client\";\nimport React from \"react\";\nimport { CastEmbed } from \"../components/cast\";\nimport { getCast } from \"../api\";\nimport { FarcasterEmbedOptions, defaultOptions } from \"../options\";\n\n/**\n * Renders a Farcaster embed for a cast. You can use two methods to render a Farcaster embed:\n * 1. Providing a Warpcast URL to a cast (url)\n * 2. Providing a username and hash of a cast (username, hash)\n * @param url Warpcast URL for the cast.\n * @param username Username of the cast author.\n * @param hash Hash of the cast.\n * @param options Custom overrides. See FarcasterEmbedOptions type for available options.\n * @returns React JSX Component\n */\nexport function FarcasterEmbed({\n  url,\n  username,\n  hash,\n  options,\n}: {\n  url?: string;\n  username?: string;\n  hash?: string;\n  options?: FarcasterEmbedOptions;\n}) {\n  const [castData, setCastData] = React.useState<any>(null);\n  // If a URL is provided, parse the username and hash from it.\n  if (url) {\n    const urlParts = url.split(\"/\");\n    username = urlParts[3];\n    hash = urlParts[4];\n  }\n\n  if (!username || !hash) {\n    throw new Error(\"You must provide a Warpcast URL or username and hash to embed a cast.\");\n  }\n\n  React.useEffect(() => {\n    const fetchCast = async () => {\n      const cast = await getCast(username, hash);\n      setCastData(cast);\n    };\n\n    fetchCast();\n  }, [username, hash]);\n\n  if (!castData) return null;\n\n  return <CastEmbed cast={castData} client options={{ ...defaultOptions, ...options }} />;\n}\n","import Linkify from \"linkify-react\";\nimport { ReplyIcon, RecastIcon, LikeIcon, BookmarkIcon, WarpcastIcon } from \"./icons\";\nimport type { CastData } from \"../types\";\nimport { CastImages } from \"./cast-images\";\nimport { CastVideos } from \"./cast-videos\";\n\nconst linkifyOptions = {\n  className: \"farcaster-embed-body-link\",\n  target: \"_blank\",\n};\n\nfunction stripLastEmbedUrlFromCastBody(source: string, target: string) {\n  // Check if the target string is at the end of the source string\n  if (source.endsWith(target)) {\n    // Calculate the start position of the target string\n    let startIndex = source.lastIndexOf(target);\n    // Replace the target string with an empty space\n    let sourceWithoutTarget = source.substring(0, startIndex);\n    // Trim the last newline\n    let lastNewLineIndex = sourceWithoutTarget.lastIndexOf(\"\\n\");\n    if (lastNewLineIndex !== -1) {\n      sourceWithoutTarget =\n        sourceWithoutTarget.substring(0, lastNewLineIndex) + sourceWithoutTarget.substring(lastNewLineIndex + 1);\n    }\n    return sourceWithoutTarget + source.substring(startIndex + target.length);\n  } else {\n    // Return the original source string if the target is not at the end\n    return source;\n  }\n}\n\nexport function CastEmbed({ cast, client, options }: { cast: CastData; client?: boolean; options: any }) {\n  const author = cast.author;\n  const profileUrl = `https://warpcast.com/~/profiles/${author.fid}`;\n  const publishedAt = new Date(cast.timestamp);\n  const timestamp = publishedAt.toLocaleString(options.timestampLocale, options.timestampFormat);\n  const fullTimestamp = publishedAt.toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  const warpcastUrl = `https://warpcast.com/${author.username}/${cast.hash}`;\n  const replies = cast.replies && cast.replies.count;\n  const likes = cast.reactions && cast.reactions.count;\n  const recasts = cast.combinedRecastCount ? cast.combinedRecastCount : cast.recasts.count;\n  const watches = cast.watches && cast.watches.count;\n  const images = cast.embeds && cast.embeds.images;\n  const hasImages = images && images.length > 0;\n  const hasVideos = cast.embeds && cast.embeds.videos && cast.embeds.videos.length > 0;\n  const videos = cast.embeds && cast.embeds.videos;\n  const hasUrls = cast.embeds && cast.embeds.urls && cast.embeds.urls.length > 0;\n  const urls = cast.embeds && cast.embeds.urls;\n  const lastUrl = (urls && urls[urls.length - 1]?.openGraph?.url) || \"\";\n  const hasCastEmbeds = cast.embeds && cast.embeds.casts;\n  const quoteCasts = cast.embeds && cast.embeds.casts;\n\n  return (\n    <div className=\"not-prose farcaster-embed-container\">\n      <div>\n        <div className=\"farcaster-embed-metadata\">\n          <a href={profileUrl} className=\"farcaster-embed-avatar-link\">\n            <img\n              src={author.pfp.url}\n              alt={`@${author.username}`}\n              width={48}\n              height={48}\n              className=\"farcaster-embed-author-avatar\"\n            />\n          </a>\n          <div className=\"farcaster-embed-author\">\n            <p className=\"farcaster-embed-author-display-name\">{author.displayName}</p>\n            <p className=\"farcaster-embed-author-username\">@{author.username}</p>\n          </div>\n          <div className=\"farcaster-embed-timestamp\">\n            <p title={fullTimestamp}>{timestamp}</p>\n          </div>\n        </div>\n        <div className=\"farcaster-embed-body\">\n          <Linkify as=\"p\" options={linkifyOptions}>\n            {stripLastEmbedUrlFromCastBody(cast.text, lastUrl)}\n          </Linkify>\n          {hasImages && <CastImages images={images} />}\n          {hasVideos && <CastVideos videos={videos} client={client} />}\n          {hasUrls && (\n            <div className=\"farcaster-embed-urls-container\">\n              {urls.map((item, index) => {\n                const { description, domain, image, title, url, useLargeImage } = item.openGraph || {};\n                const isTwitter = domain === \"twitter.com\" || domain === \"t.co\" || domain === \"x.com\";\n\n                if (domain === \"warpcast.com\") return null;\n\n                if (useLargeImage) {\n                  return (\n                    <a key={index} href={url} target=\"_blank\" className=\"farcaster-embed-url-link\">\n                      {image && <img src={image} alt={title} className=\"farcaster-embed-url-image\" />}\n                      <span className=\"farcaster-embed-url-metadata\">\n                        <span className=\"farcaster-embed-url-title\">{title}</span>\n                        {description && <span className=\"farcaster-embed-url-description\">{description}</span>}\n                        {domain && <span className=\"farcaster-embed-url-domain\">{domain}</span>}\n                      </span>\n                    </a>\n                  );\n                }\n\n                return (\n                  <a\n                    key={index}\n                    href={url}\n                    target=\"_blank\"\n                    className=\"farcaster-embed-url-link farcaster-embed-url-link-compact\"\n                  >\n                    {image && !isTwitter && <img src={image} alt={title} className=\"farcaster-embed-url-image\" />}\n                    <span className=\"farcaster-embed-url-metadata\">\n                      <span className=\"farcaster-embed-url-title\">{title}</span>\n                      {description && <span className=\"farcaster-embed-url-description\">{description}</span>}\n                      {domain && <span className=\"farcaster-embed-url-domain\">{domain}</span>}\n                    </span>\n                  </a>\n                );\n              })}\n            </div>\n          )}\n          {hasCastEmbeds && (\n            <div className=\"farcaster-embed-quote-cast-container\">\n              {quoteCasts.map((quoteCast: CastData) => {\n                const qcPublishedAt = new Date(quoteCast.timestamp);\n                const qcTimestamp = qcPublishedAt.toLocaleString(options.timestampLocale, options.timestampFormat);\n                const qcHasImages = quoteCast.embeds && quoteCast.embeds.images && quoteCast.embeds.images.length > 0;\n                const qcImages = quoteCast.embeds && quoteCast.embeds.images;\n                const qcHasVideos = quoteCast.embeds && quoteCast.embeds.videos && quoteCast.embeds.videos.length > 0;\n                const qcVideos = quoteCast.embeds && quoteCast.embeds.videos;\n\n                return (\n                  <div key={quoteCast.hash} className=\"farcaster-embed-quote-cast\">\n                    <div className=\"farcaster-embed-metadata\">\n                      <div className=\"farcaster-embed-avatar-link\">\n                        <img\n                          src={quoteCast.author.pfp.url}\n                          alt={`@${quoteCast.author.username}`}\n                          width={20}\n                          height={20}\n                          className=\"farcaster-embed-author-avatar\"\n                        />\n                      </div>\n                      <div className=\"farcaster-embed-author\">\n                        <p className=\"farcaster-embed-author-display-name\">{quoteCast.author.displayName}</p>\n                        <p className=\"farcaster-embed-author-username\">@{quoteCast.author.username}</p>\n                      </div>\n                      <div className=\"farcaster-embed-timestamp\">\n                        <p>{qcTimestamp}</p>\n                      </div>\n                    </div>\n                    <div className=\"farcaster-embed-body\">\n                      <Linkify as=\"p\" options={linkifyOptions}>\n                        {quoteCast.text}\n                      </Linkify>\n                      {qcHasImages && <CastImages images={qcImages} />}\n                      {qcHasVideos && <CastVideos videos={qcVideos} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        {cast.tags.length > 0 && (\n          <div>\n            <div className=\"farcaster-embed-channel\">\n              {cast.tags[0].imageUrl && (\n                <img\n                  src={cast.tags[0].imageUrl}\n                  alt={cast.tags[0].name}\n                  width={16}\n                  height={16}\n                  className=\"farcaster-embed-channel-avatar\"\n                />\n              )}\n              {cast.tags[0].name && <p className=\"farcaster-embed-channel-name\">{cast.tags[0].name}</p>}\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"farcaster-embed-stats\">\n        <ul>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={warpcastUrl} target=\"_blank\">\n              <ReplyIcon />\n              <span>{replies.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={warpcastUrl} target=\"_blank\">\n              <RecastIcon />\n              <span>{recasts.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={warpcastUrl} target=\"_blank\">\n              <LikeIcon />\n              <span>{likes.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n          <li>\n            <a className=\"farcaster-embed-stats-link\" href={warpcastUrl} target=\"_blank\">\n              <BookmarkIcon />\n              <span>{watches.toLocaleString(\"en-US\")}</span>\n            </a>\n          </li>\n        </ul>\n        <div className=\"farcaster-embed-warpcast-icon\">\n          <a href={warpcastUrl} title=\"Show on Warpcast\" target=\"_blank\" className=\"farcaster-embed-warpcast-link\">\n            <WarpcastIcon />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","export const ReplyIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\n  </svg>\n);\n\nexport const RecastIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M17 2.1l4 4-4 4\" />\n    <path d=\"M3 12.2v-2a4 4 0 0 1 4-4h12.8M7 21.9l-4-4 4-4\" />\n    <path d=\"M21 11.8v2a4 4 0 0 1-4 4H4.2\" />\n  </svg>\n);\n\nexport const LikeIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path>\n  </svg>\n);\n\nexport const BookmarkIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\"></path>\n  </svg>\n);\n\nexport const WarpcastIcon = () => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 1260 1260\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g clipPath=\"url(#fc-embed-clip1)\">\n      <path\n        d=\"M947.747 1259.61H311.861C139.901 1259.61 0 1119.72 0 947.752V311.871C0 139.907 139.901 0.00541362 311.861 0.00541362H947.747C1119.71 0.00541362 1259.61 139.907 1259.61 311.871V947.752C1259.61 1119.72 1119.71 1259.61 947.747 1259.61Z\"\n        fill=\"#472A91\"\n      ></path>\n      <path\n        d=\"M826.513 398.633L764.404 631.889L702.093 398.633H558.697L495.789 633.607L433.087 398.633H269.764L421.528 914.36H562.431L629.807 674.876L697.181 914.36H838.388L989.819 398.633H826.513Z\"\n        fill=\"white\"\n      ></path>\n    </g>\n    <defs>\n      <clipPath id=\"fc-embed-clip1\">\n        <rect width=\"1259.61\" height=\"1259.61\" fill=\"white\"></rect>\n      </clipPath>\n    </defs>\n  </svg>\n);\n","import type { CastImage } from \"../types\";\n\nexport function CastImages({ images }: { images: CastImage[] }) {\n  return (\n    <div className=\"farcaster-embed-image-container\">\n      {images.map((image: CastImage) => {\n        return (\n          <a key={image.url} href={image.url} target=\"_blank\" className=\"farcaster-embed-image-link\">\n            <img src={image.url} alt={image.alt} className=\"farcaster-embed-image\" />\n          </a>\n        );\n      })}\n    </div>\n  );\n}\n","\"use client\";\nimport React from \"react\";\n\nexport function VideoPlayerClient({\n  source,\n  poster,\n  aspectRatio,\n}: {\n  source: string;\n  poster: string;\n  aspectRatio: number;\n}) {\n  const [isMediaChromeLoaded, setIsMediaChromeLoaded] = React.useState(false);\n  const [isHlsVideoElementLoaded, setIsHlsVideoElementLoaded] = React.useState(false);\n\n  const loadScript = (src: string) => {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = src;\n      script.type = \"module\";\n      script.onload = () => resolve(script);\n      script.onerror = () => reject(new Error(`[react-farcaster-embed] Script load error for ${src}`));\n      document.head.appendChild(script);\n    });\n  };\n\n  React.useEffect(() => {\n    const mediaChrome = \"https://cdn.jsdelivr.net/npm/media-chrome@1/+esm\";\n    const hlsVideoElement = \"https://cdn.jsdelivr.net/npm/hls-video-element@1.0/+esm\";\n\n    loadScript(mediaChrome)\n      .then(() => {\n        setIsMediaChromeLoaded(true);\n      })\n      .catch((error) => {\n        console.error(\"Media Chrome loading failed\", error);\n      });\n\n    loadScript(hlsVideoElement)\n      .then(() => {\n        setIsHlsVideoElementLoaded(true);\n      })\n      .catch((error) => {\n        console.error(\"HLS Video Element loading failed\", error);\n      });\n\n    return () => {\n      document.head.removeChild(document.head.querySelector(`script[src=\"${mediaChrome}\"]`));\n      document.head.removeChild(document.head.querySelector(`script[src=\"${hlsVideoElement}\"]`));\n    };\n  }, [source, poster, aspectRatio]);\n\n  return (\n    <div\n      style={{\n        aspectRatio,\n      }}\n    >\n      {isMediaChromeLoaded && isHlsVideoElementLoaded && (\n        <div\n          className=\"farcaster-embed-video-player\"\n          dangerouslySetInnerHTML={{\n            __html: `<media-controller>\n            <hls-video\n              src=\"${source}\"\n              slot=\"media\"\n              volume=\"1\"\n              crossorigin\n              playsinline\n            ></hls-video>\n            <media-poster-image\n              slot=\"poster\"\n              src=\"${poster}\">\n            </media-poster-image>\n            <media-loading-indicator slot=\"centered-chrome\" noautohide></media-loading-indicator>\n            <media-control-bar>\n              <media-play-button></media-play-button>\n              <media-time-range></media-time-range>\n              <media-time-display showduration remaining></media-time-display>\n              <media-fullscreen-button></media-fullscreen-button>\n            </media-control-bar>\n          </media-controller>`,\n          }}\n        ></div>\n      )}\n    </div>\n  );\n}\n","export function VideoPlayer({ source, poster, aspectRatio }: { source: string; poster: string; aspectRatio: number }) {\n  return (\n    <div\n      style={{\n        aspectRatio,\n      }}\n    >\n      <div\n        className=\"farcaster-embed-video-player\"\n        suppressHydrationWarning\n        dangerouslySetInnerHTML={{\n          __html: `<script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/media-chrome@1/+esm\" crossorigin=\"anonymous\"></script><script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/hls-video-element@1.0/+esm\" crossorigin=\"anonymous\"></script><media-controller>\n            <hls-video\n              src=\"${source}\"\n              slot=\"media\"\n              volume=\"1\"\n              crossorigin\n              playsinline\n            ></hls-video>\n            <media-poster-image\n              slot=\"poster\"\n              src=\"${poster}\">\n            </media-poster-image>\n            <media-loading-indicator slot=\"centered-chrome\" noautohide></media-loading-indicator>\n            <media-control-bar>\n              <media-play-button></media-play-button>\n              <media-time-range></media-time-range>\n              <media-time-display showduration remaining></media-time-display>\n              <media-fullscreen-button></media-fullscreen-button>\n            </media-control-bar>\n          </media-controller>`,\n        }}\n      ></div>\n    </div>\n  );\n}\n","import { VideoPlayerClient } from \"../client/video-player-client\";\nimport type { CastVideo } from \"../types\";\nimport { VideoPlayer } from \"./video-player\";\n\nexport function CastVideos({ videos, client }: { videos: CastVideo[]; client?: boolean }) {\n  return (\n    <div className=\"farcaster-embed-video-container\">\n      {videos.map((video: CastVideo) => {\n        return client ? (\n          <VideoPlayerClient\n            key={video.url}\n            source={video.sourceUrl}\n            aspectRatio={video.width / video.height}\n            poster={video.thumbnailUrl}\n          />\n        ) : (\n          <VideoPlayer\n            key={video.url}\n            source={video.sourceUrl}\n            aspectRatio={video.width / video.height}\n            poster={video.thumbnailUrl}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","export const getCast = async (username: string, hash: string, options?: { customEndpoint?: string }) => {\n  try {\n    const res = await fetch(\n      options?.customEndpoint\n        ? `${options?.customEndpoint}/${username}/${hash}`\n        : `https://farcaster.tv/${username}/${hash}`,\n    );\n    const cast = await res.json();\n\n    // Handle weird reply to a cast in a channel returning the original cast.\n    // We need to check if the username and hash are matching the linked cast to render the right one.\n    // Very weird API, but it's the only way to get the right cast.\n    if (\n      cast.result.casts[2] &&\n      cast.result.casts[2].author.username === username &&\n      cast.result.casts[2].hash.includes(hash)\n    ) {\n      return cast.result.casts[2];\n    }\n\n    // Handle skipping root-embed casts which are empty parents for a cast in a channel.\n    if (cast.result.casts[0].castType === \"root-embed\") {\n      return cast.result.casts[1];\n    }\n\n    return cast.result.casts[0];\n  } catch (e) {\n    console.error(e);\n    throw new Error(\n      `Unable to fetch cast ${hash} by ${username}.${\n        options?.customEndpoint &&\n        \" You are using a custom endpoint (\" +\n          options?.customEndpoint +\n          \"). Make sure it is correct and the server is running. For more info about the proxy server check the README.\"\n      }`,\n    );\n  }\n};\n","export type FarcasterEmbedOptions = {\n  timestampFormat?: Intl.DateTimeFormatOptions;\n  timestampLocale?: string;\n  customEndpoint?: string;\n};\n\nexport const defaultOptions: FarcasterEmbedOptions = {\n  timestampFormat: {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  },\n  timestampLocale: \"en-US\",\n};\n"],"mappings":"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","names":["client_exports","__export","FarcasterEmbed","__toCommonJS","import_react","import_linkify_react","import_jsx_runtime","ReplyIcon","RecastIcon","LikeIcon","BookmarkIcon","WarpcastIcon","import_jsx_runtime","CastImages","images","image","import_react","import_jsx_runtime","VideoPlayerClient","source","poster","aspectRatio","isMediaChromeLoaded","setIsMediaChromeLoaded","React","isHlsVideoElementLoaded","setIsHlsVideoElementLoaded","loadScript","src","resolve","reject","script","mediaChrome","hlsVideoElement","error","import_jsx_runtime","VideoPlayer","source","poster","aspectRatio","import_jsx_runtime","CastVideos","videos","client","video","VideoPlayerClient","VideoPlayer","import_jsx_runtime","linkifyOptions","stripLastEmbedUrlFromCastBody","source","target","startIndex","sourceWithoutTarget","lastNewLineIndex","CastEmbed","cast","client","options","author","profileUrl","publishedAt","timestamp","fullTimestamp","warpcastUrl","replies","likes","recasts","watches","images","hasImages","hasVideos","videos","hasUrls","urls","lastUrl","hasCastEmbeds","quoteCasts","Linkify","CastImages","CastVideos","item","index","description","domain","image","title","url","useLargeImage","isTwitter","quoteCast","qcTimestamp","qcHasImages","qcImages","qcHasVideos","qcVideos","ReplyIcon","RecastIcon","LikeIcon","BookmarkIcon","WarpcastIcon","getCast","username","hash","options","cast","e","defaultOptions","import_jsx_runtime","FarcasterEmbed","url","username","hash","options","castData","setCastData","React","urlParts","cast","getCast","CastEmbed","defaultOptions"]}